name: Build Image and Deploy to App Runner
on:
  push:
    branches: [develop, main]
  workflow_dispatch:

jobs:
  test:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - run: npm ci
      - run: npm run test

  build:
    name: Build, tag, and push image to Amazon ECR
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          capabilities: CAPABILITY_NAMED_IAM
          name: passport-nft-stack
          template: cloudformation/app_runner_resources.yml
          no-fail-on-empty-changeset: '1'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}
          REACT_APP_INFURA_PUBLIC_ID: ${{ secrets.REACT_APP_INFURA_PUBLIC_ID }}
          REACT_APP_INFURA_SECRET_KEY: ${{ secrets.REACT_APP_INFURA_SECRET_KEY }}
          REACT_APP_CROSSMINT_CLIENT_ID: ${{ secrets.REACT_APP_CROSSMINT_CLIENT_ID }}
        run: |
          docker build --build-arg REACT_APP_INFURA_PUBLIC_ID=${REACT_APP_INFURA_PUBLIC_ID} --build-arg REACT_APP_INFURA_SECRET_KEY=${REACT_APP_INFURA_SECRET_KEY} --build-arg REACT_APP_CROSSMINT_CLIENT_ID=${REACT_APP_CROSSMINT_CLIENT_ID} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-to-test:
    name: Deploy to App Runner (Test)
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create image name
        id: get-image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY_NAME }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}

        run: |
          echo ::set-output name=image::${{ format(
            '{0}/{1}:{2}',
            env.ECR_REGISTRY,
            env.ECR_REPOSITORY,
            env.IMAGE_TAG
          ) }}

      - name: Deploy to App Runner (Test)
        id: deploy-apprunner-test
        uses: awslabs/amazon-app-runner-deploy@main
        with:
          service: passport-nft-service-test
          image: ${{ steps.get-image.outputs.image }}
          access-role-arn: ${{ secrets.ACCESS_ROLE_ARN }}
          region: us-east-1
          cpu: 1
          memory: 2
          wait-for-service-stability: true

      - name: App Runner test output
        run: echo "App runner test service output ${{ steps.deploy-apprunner-test.outputs.service-id }}"

  deploy-to-prod:
    name: Deploy to App Runner (Prod)
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create image name
        id: get-image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY_NAME }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}

        run: |
          echo ::set-output name=image::${{ format(
            '{0}/{1}:{2}',
            env.ECR_REGISTRY,
            env.ECR_REPOSITORY,
            env.IMAGE_TAG
          ) }}

      - name: Deploy to App Runner (Prod)
        id: deploy-apprunner-prod
        uses: awslabs/amazon-app-runner-deploy@main
        with:
          service: passport-nft-service-prod
          image: ${{ steps.get-image.outputs.image }}
          access-role-arn: ${{ secrets.ACCESS_ROLE_ARN }}
          region: us-east-1
          cpu: 1
          memory: 2
          wait-for-service-stability: true

      - name: App Runner prod output
        run: echo "App runner prod service output ${{ steps.deploy-apprunner-prod.outputs.service-id }}"
